import os
import json
import yaml


codepage = "λƛ¬∧⟑∨⟇÷×«␤»°•ß†€"
codepage += "½∆ø↔¢⌐æʀʁɾɽÞƈ∞¨␠"
codepage += "!\"#$%&'()*+,-./01"
codepage += "23456789:;<=>?@A"
codepage += "BCDEFGHIJKLMNOPQ"
codepage += "RSTUVWXYZ[\\]`^_abc"
codepage += "defghijklmnopqrs"
codepage += "tuvwxyz{|}~↑↓∴∵›"
codepage += "‹∷¤ð→←βτȧḃċḋėḟġḣ"
codepage += "ḭŀṁṅȯṗṙṡṫẇẋẏż√⟨⟩"
codepage += "‛₀₁₂₃₄₅₆₇₈¶⁋§ε¡"
codepage += "∑¦≈µȦḂĊḊĖḞĠḢİĿṀṄ"
codepage += "ȮṖṘṠṪẆẊẎŻ₌₍⁰¹²∇⌈"
codepage += "⌊¯±₴…□↳↲⋏⋎꘍ꜝ℅≤≥"
codepage += "≠⁼ƒɖ∪∩⊍£¥⇧⇩ǍǎǏǐǑ"
codepage += "ǒǓǔ⁽‡≬⁺↵⅛¼¾Π„‟"

CURR_DIR = os.path.dirname(os.path.realpath(__file__))
ELEMENTS_YAML = os.path.join(CURR_DIR, "elements.yaml")
JS_FILE = os.path.join(CURR_DIR, "../../static/parsed_yaml.js")

with open(ELEMENTS_YAML, "r", encoding="utf-8") as elements:
    data = yaml.safe_load(elements)

# keyed by the first character of the element/modified
data_json = {}
keys_to_remove = ["element", "modifier", "vectorise", "tests", "arity"]
for element in data:
    token = element["element" if "element" in element else "modifier"]
    if token == "#{":
        index = 35
    elif token == " ":
        index = 32
    elif token[-1] in codepage:
        index = codepage.index(token[-1])
    else:
        # token not in codepage, continue
        continue

    # make the dictionary to add
    data_to_add = element.copy()
    data_to_add["token"] = token if token != " " else codepage[index]
    for key in keys_to_remove:
        data_to_add.pop(key, None)
    if "overloads" in data_to_add:
        overloads = []
        for types, desc in data_to_add["overloads"].items():
            overloads.append(f'{types.replace("-", ", ")} -> {desc}')
        data_to_add["overloads"] = "\n".join(overloads)

    # add it
    if index not in data_json:
        data_json[index] = []
    data_json[index].append(data_to_add)

with open(JS_FILE, mode="w", encoding="utf-8") as out:
    out.write("// Very important: DON'T EDIT THIS FILE!\n")
    out.write("// It's autogenerated\n")
    out.write("// See yaml_to_js.py\n\n")
    out.write("var codepage_descriptions =\n")
    out.write(f"{json.dumps(data_json, indent=2)}\n")
